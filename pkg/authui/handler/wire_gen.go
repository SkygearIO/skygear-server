// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package handler

import (
	"context"
	"fmt"
	"github.com/google/wire"
	"github.com/skygeario/skygear-server/pkg/authui/inject"
	"github.com/skygeario/skygear-server/pkg/authui/provider"
	"github.com/skygeario/skygear-server/pkg/authui/template"
	"github.com/skygeario/skygear-server/pkg/core/audit"
	"github.com/skygeario/skygear-server/pkg/core/auth"
	"github.com/skygeario/skygear-server/pkg/core/auth/authinfo"
	"github.com/skygeario/skygear-server/pkg/core/auth/authinfo/pq"
	"github.com/skygeario/skygear-server/pkg/core/auth/hook"
	"github.com/skygeario/skygear-server/pkg/core/auth/mfa"
	"github.com/skygeario/skygear-server/pkg/core/auth/passwordhistory"
	"github.com/skygeario/skygear-server/pkg/core/auth/principal/password"
	"github.com/skygeario/skygear-server/pkg/core/auth/session"
	"github.com/skygeario/skygear-server/pkg/core/auth/session/redis"
	"github.com/skygeario/skygear-server/pkg/core/auth/userprofile"
	"github.com/skygeario/skygear-server/pkg/core/config"
	"github.com/skygeario/skygear-server/pkg/core/db"
	http2 "github.com/skygeario/skygear-server/pkg/core/http"
	"github.com/skygeario/skygear-server/pkg/core/logging"
	"github.com/skygeario/skygear-server/pkg/core/loginid"
	"github.com/skygeario/skygear-server/pkg/core/mail"
	"github.com/skygeario/skygear-server/pkg/core/sentry"
	"github.com/skygeario/skygear-server/pkg/core/sms"
	template2 "github.com/skygeario/skygear-server/pkg/core/template"
	"github.com/skygeario/skygear-server/pkg/core/time"
	"github.com/skygeario/skygear-server/pkg/core/urlprefix"
	"github.com/skygeario/skygear-server/pkg/core/validation"
	"net/http"
)

// Injectors from wire.go:

func InjectRootHandler(r *http.Request) *RootHandler {
	rootHandler := NewRootHandler()
	return rootHandler
}

func InjectAuthorizeHandler(r *http.Request, dep *inject.BootTimeDependency) *AuthorizeHandler {
	tenantConfiguration := ProvideTenantConfigPtr(r)
	validator := ProvideValidator(dep)
	authContextProviderImpl := provider.NewAuthContextProvider(tenantConfiguration, r)
	validateProviderImpl := provider.NewValidateProvider(tenantConfiguration, validator, authContextProviderImpl)
	enableFileSystemTemplate := ProvideEnableFileSystemTemplate(dep)
	assetGearLoader := ProvideAssetGearLoader(dep)
	engine := template.NewEngine(tenantConfiguration, enableFileSystemTemplate, assetGearLoader)
	renderProviderImpl := provider.NewRenderProvider(tenantConfiguration, engine)
	sqlBuilder := ProvideSQLBuilder(tenantConfiguration)
	context := ProvideContext(r)
	configTenantConfiguration := ProvideTenantConfig(r)
	contextImpl := db.NewContextImpl(context, configTenantConfiguration)
	sqlExecutor := ProvideSQLExecutor(context, contextImpl)
	storeImpl := password.NewStore(sqlBuilder, sqlExecutor)
	providerImpl := time.NewProvider()
	passwordhistoryStoreImpl := passwordhistory.NewPasswordHistoryStore(sqlBuilder, sqlExecutor, providerImpl)
	factoryImpl := ProvideLoggingFactory(tenantConfiguration, context, r)
	reservedNameChecker := ProvideReservedNameChecker(dep)
	passwordProviderImpl := ProvidePasswordAuthProvider(storeImpl, passwordhistoryStoreImpl, factoryImpl, tenantConfiguration, reservedNameChecker)
	trail := ProvideAuditTrail(tenantConfiguration)
	mfaStoreImpl := ProvideMFAStore(tenantConfiguration, sqlBuilder, sqlExecutor, providerImpl)
	clientImpl := ProvideSMSClient(tenantConfiguration)
	senderImpl := ProvideMailSender(tenantConfiguration)
	mfaSenderImpl := mfa.NewSender(configTenantConfiguration, clientImpl, senderImpl, engine)
	mfaProviderImpl := ProvideMFAProvider(mfaStoreImpl, tenantConfiguration, providerImpl, mfaSenderImpl)
	authenticationProviderImpl := provider.NewAuthenticationProvider(passwordProviderImpl, trail, factoryImpl, providerImpl, authContextProviderImpl, mfaProviderImpl, tenantConfiguration)
	authorizeHandler := NewAuthorizeHandler(validateProviderImpl, renderProviderImpl, authContextProviderImpl, authenticationProviderImpl)
	return authorizeHandler
}

// wire.go:

var SessionKey = redis.SessionKeyFunc(func(appID string, sessionID string) string {
	return fmt.Sprintf("%s:auth-ui:session:%s", appID, sessionID)
})

var SessionListKey = redis.SessionListKeyFunc(func(appID string, sessionID string) string {
	return fmt.Sprintf("%s:auth-ui:session-list:%s", appID, sessionID)
})

var EventStreamKey = redis.EventStreamKeyFunc(func(appID string, sessionID string) string {
	return fmt.Sprintf("%s:auth-ui:event:%s", appID, sessionID)
})

func ProvideTenantConfigPtr(r *http.Request) *config.TenantConfiguration {
	return config.GetTenantConfig(r.Context())
}

func ProvideTenantConfig(r *http.Request) config.TenantConfiguration {
	return *config.GetTenantConfig(r.Context())
}

func ProvideContext(r *http.Request) context.Context {

	return r.Context()
}

func ProvideAssetGearLoader(dep *inject.BootTimeDependency) *template2.AssetGearLoader {
	configuration := dep.Configuration
	if configuration.Template.AssetGearEndpoint != "" && configuration.Template.AssetGearMasterKey != "" {
		return &template2.AssetGearLoader{
			AssetGearEndpoint:  configuration.Template.AssetGearEndpoint,
			AssetGearMasterKey: configuration.Template.AssetGearMasterKey,
		}
	}
	return nil
}

func ProvideEnableFileSystemTemplate(dep *inject.BootTimeDependency) inject.EnableFileSystemTemplate {
	return inject.EnableFileSystemTemplate(dep.Configuration.Template.EnableFileLoader)
}

func ProvideValidator(dep *inject.BootTimeDependency) *validation.Validator {
	return dep.Validator
}

func ProvideReservedNameChecker(dep *inject.BootTimeDependency) *loginid.ReservedNameChecker {
	return dep.ReservedNameChecker
}

func ProvideLoggingFactory(tConfig *config.TenantConfiguration, ctx context.Context, r *http.Request) *logging.FactoryImpl {
	logHook := logging.NewDefaultLogHook(tConfig.DefaultSensitiveLoggerValues())
	sentryHook := sentry.NewLogHookFromContext(ctx)
	return logging.NewFactoryFromRequest(r, logHook, sentryHook)
}

func ProvideSessionStore(
	tConfig *config.TenantConfiguration,
	ctx context.Context,
	timeProvider time.Provider,
	loggingFactory logging.Factory,
) *redis.StoreImpl {
	return redis.NewStore(
		ctx,
		tConfig.AppID,
		timeProvider,
		loggingFactory,
		SessionKey,
		SessionListKey,
	)
}

func ProvideSessionEventStore(
	tConfig *config.TenantConfiguration,
	ctx context.Context,
) *redis.EventStoreImpl {
	return redis.NewEventStore(
		ctx,
		tConfig.AppID,
		EventStreamKey,
	)
}

func ProvideSessionProvider(
	r *http.Request,
	tConfig *config.TenantConfiguration,
	store session.Store,
	eventStore session.EventStore,
	authContext auth.ContextGetter,
	timeProvider time.Provider,
) *session.ProviderImpl {
	return session.NewProvider(
		r,
		store,
		eventStore,
		authContext,
		tConfig.AppConfig.Clients,
	)
}

func ProvideSQLBuilder(tConfig *config.TenantConfiguration) db.SQLBuilder {

	return db.NewSQLBuilder("auth", tConfig.DatabaseConfig.DatabaseSchema, tConfig.AppID)
}

func ProvideSQLExecutor(ctx context.Context, dbContext db.Context) db.SQLExecutor {
	return db.NewSQLExecutor(ctx, dbContext)
}

func ProvidePasswordAuthProvider(
	store password.Store,
	historyStore passwordhistory.Store,
	loggerFactory logging.Factory,
	tConfig *config.TenantConfiguration,
	reservedNameChecker *loginid.ReservedNameChecker,
) *password.ProviderImpl {
	return password.NewProvider(
		store,
		historyStore,
		loggerFactory,
		tConfig.AppConfig.Auth.LoginIDKeys,
		tConfig.AppConfig.Auth.LoginIDTypes,
		tConfig.AppConfig.Auth.AllowedRealms,
		tConfig.AppConfig.PasswordPolicy.IsPasswordHistoryEnabled(),
		reservedNameChecker,
	)
}

func ProvideAuditTrail(tConfig *config.TenantConfiguration) audit.Trail {
	t, err := audit.NewTrail(tConfig.AppConfig.UserAudit.Enabled, tConfig.AppConfig.UserAudit.TrailHandlerURL)
	if err != nil {
		panic(err)
	}
	return t
}

func ProvideSMSClient(tConfig *config.TenantConfiguration) *sms.ClientImpl {
	return sms.NewClient(tConfig.AppConfig)
}

func ProvideMailSender(tConfig *config.TenantConfiguration) *mail.SenderImpl {
	return mail.NewSender(tConfig.AppConfig.SMTP)
}

func ProvideMFAStore(
	tConfig *config.TenantConfiguration,
	sqlBuilder db.SQLBuilder,
	sqlExecutor db.SQLExecutor,
	timeProvider time.Provider,
) *mfa.StoreImpl {
	return mfa.NewStore(tConfig.AppConfig.MFA, sqlBuilder, sqlExecutor, timeProvider)
}

func ProvideMFAProvider(
	store mfa.Store,
	tConfig *config.TenantConfiguration,
	timeProvider time.Provider,
	sender mfa.Sender,
) *mfa.ProviderImpl {
	return mfa.NewProvider(store, tConfig.AppConfig.MFA, timeProvider, sender)
}

func ProvideHookMutator(
	tConfig *config.TenantConfiguration,
	passwordProvider password.Provider,
	authInfoStore authinfo.Store,
	userProfileStore userprofile.Store,
) *hook.MutatorImpl {
	return hook.NewMutator(tConfig.AppConfig.UserVerification, passwordProvider, authInfoStore, userProfileStore)
}

func ProvideHookProvider(
	r *http.Request, urlprefix2 urlprefix.Provider,

	store hook.Store,
	authContext auth.ContextGetter,
	timeProvider time.Provider,
	authInfoStore authinfo.Store,
	userProfileStore userprofile.Store,
	deliverer hook.Deliverer,
	loggerFactory logging.Factory,
) *hook.ProviderImpl {
	return hook.NewProvider(
		r.Header.Get(http2.HeaderRequestID), urlprefix2, store,
		authContext,
		timeProvider,
		authInfoStore,
		userProfileStore,
		deliverer,
		loggerFactory,
	)
}

var DefaultSet = wire.NewSet(
	ProvideTenantConfig,
	ProvideTenantConfigPtr,
	ProvideContext,
	ProvideAssetGearLoader,
	ProvideEnableFileSystemTemplate,
	ProvideValidator,
	ProvideReservedNameChecker,
	ProvideSQLBuilder,
	ProvideSQLExecutor, template.NewEngine, urlprefix.NewProvider, wire.Bind(new(time.Provider), new(time.ProviderImpl)), time.NewProvider, wire.Bind(new(provider.RenderProvider), new(*provider.RenderProviderImpl)), provider.NewRenderProvider, wire.Bind(new(provider.ValidateProvider), new(*provider.ValidateProviderImpl)), provider.NewValidateProvider, wire.Bind(new(auth.ContextGetter), new(*provider.AuthContextProviderImpl)), wire.Bind(new(provider.AuthContextProvider), new(*provider.AuthContextProviderImpl)), provider.NewAuthContextProvider, wire.Bind(new(logging.Factory), new(*logging.FactoryImpl)), ProvideLoggingFactory, wire.Bind(new(session.Store), new(*redis.StoreImpl)), ProvideSessionStore, wire.Bind(new(session.EventStore), new(*redis.EventStoreImpl)), ProvideSessionEventStore, wire.Bind(new(session.Provider), new(*session.ProviderImpl)), ProvideSessionProvider, wire.Bind(new(db.Context), new(*db.ContextImpl)), wire.Bind(new(db.TxContext), new(*db.ContextImpl)), wire.Bind(new(db.SafeTxContext), new(*db.ContextImpl)), db.NewContextImpl, wire.Bind(new(authinfo.Store), new(*pq.StoreImpl)), pq.NewAuthInfoStore, wire.Bind(new(userprofile.Store), new(*userprofile.StoreImpl)), userprofile.NewUserProfileStore, wire.Bind(new(password.Store), new(*password.StoreImpl)), password.NewStore, wire.Bind(new(passwordhistory.Store), new(*passwordhistory.StoreImpl)), passwordhistory.NewPasswordHistoryStore, wire.Bind(new(password.Provider), new(*password.ProviderImpl)), ProvidePasswordAuthProvider,

	ProvideAuditTrail, wire.Bind(new(sms.Client), new(*sms.ClientImpl)), ProvideSMSClient, wire.Bind(new(mail.Sender), new(*mail.SenderImpl)), ProvideMailSender, wire.Bind(new(mfa.Sender), new(*mfa.SenderImpl)), mfa.NewSender, wire.Bind(new(mfa.Store), new(*mfa.StoreImpl)), ProvideMFAStore, wire.Bind(new(mfa.Provider), new(*mfa.ProviderImpl)), ProvideMFAProvider, wire.Bind(new(hook.Store), new(*hook.StoreImpl)), hook.NewStore, wire.Bind(new(hook.Mutator), new(*hook.MutatorImpl)), ProvideHookMutator, wire.Bind(new(hook.Deliverer), new(*hook.DelivererImpl)), hook.NewDeliverer, wire.Bind(new(hook.Provider), new(*hook.ProviderImpl)), ProvideHookProvider, wire.Bind(new(provider.AuthenticationProvider), new(*provider.AuthenticationProviderImpl)), provider.NewAuthenticationProvider,
)
