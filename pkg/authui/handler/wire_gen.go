// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package handler

import (
	"context"
	"github.com/google/wire"
	"github.com/skygeario/skygear-server/pkg/authui/inject"
	"github.com/skygeario/skygear-server/pkg/authui/provider"
	"github.com/skygeario/skygear-server/pkg/authui/template"
	"github.com/skygeario/skygear-server/pkg/core/auth"
	"github.com/skygeario/skygear-server/pkg/core/config"
	"github.com/skygeario/skygear-server/pkg/core/logging"
	"github.com/skygeario/skygear-server/pkg/core/sentry"
	template2 "github.com/skygeario/skygear-server/pkg/core/template"
	"github.com/skygeario/skygear-server/pkg/core/validation"
	"net/http"
)

// Injectors from wire.go:

func InjectRootHandler(r *http.Request) *RootHandler {
	rootHandler := NewRootHandler()
	return rootHandler
}

func InjectAuthorizeHandler(r *http.Request, dep *inject.BootTimeDependency) *AuthorizeHandler {
	tenantConfiguration := ProvideTenantConfig(r)
	enableFileSystemTemplate := ProvideEnableFileSystemTemplate(dep)
	assetGearLoader := ProvideAssetGearLoader(dep)
	engine := template.NewEngine(tenantConfiguration, enableFileSystemTemplate, assetGearLoader)
	validator := ProvideValidator(dep)
	authContextProviderImpl := provider.NewAuthContextProvider(tenantConfiguration, r)
	validateProviderImpl := provider.NewValidateProvider(tenantConfiguration, validator, authContextProviderImpl)
	renderProviderImpl := provider.NewRenderProvider(tenantConfiguration, engine)
	authorizeHandler := NewAuthorizeHandler(engine, validateProviderImpl, renderProviderImpl, authContextProviderImpl)
	return authorizeHandler
}

// wire.go:

func ProvideTenantConfig(r *http.Request) *config.TenantConfiguration {
	return config.GetTenantConfig(r.Context())
}

func ProvideContext(r *http.Request) context.Context {

	return r.Context()
}

func ProvideAssetGearLoader(dep *inject.BootTimeDependency) *template2.AssetGearLoader {
	configuration := dep.Configuration
	if configuration.Template.AssetGearEndpoint != "" && configuration.Template.AssetGearMasterKey != "" {
		return &template2.AssetGearLoader{
			AssetGearEndpoint:  configuration.Template.AssetGearEndpoint,
			AssetGearMasterKey: configuration.Template.AssetGearMasterKey,
		}
	}
	return nil
}

func ProvideEnableFileSystemTemplate(dep *inject.BootTimeDependency) inject.EnableFileSystemTemplate {
	return inject.EnableFileSystemTemplate(dep.Configuration.Template.EnableFileLoader)
}

func ProvideValidator(dep *inject.BootTimeDependency) *validation.Validator {
	return dep.Validator
}

func ProvideLoggingFactory(tConfig *config.TenantConfiguration, ctx context.Context, r *http.Request) *logging.FactoryImpl {
	logHook := logging.NewDefaultLogHook(tConfig.DefaultSensitiveLoggerValues())
	sentryHook := sentry.NewLogHookFromContext(ctx)
	return logging.NewFactoryFromRequest(r, logHook, sentryHook)
}

var DefaultSet = wire.NewSet(
	ProvideTenantConfig,
	ProvideContext,
	ProvideAssetGearLoader,
	ProvideEnableFileSystemTemplate,
	ProvideValidator, template.NewEngine, wire.Bind(new(provider.RenderProvider), new(*provider.RenderProviderImpl)), provider.NewRenderProvider, wire.Bind(new(provider.ValidateProvider), new(*provider.ValidateProviderImpl)), provider.NewValidateProvider, wire.Bind(new(auth.ContextGetter), new(*provider.AuthContextProviderImpl)), wire.Bind(new(provider.AuthContextProvider), new(*provider.AuthContextProviderImpl)), provider.NewAuthContextProvider, wire.Bind(new(logging.Factory), new(*logging.FactoryImpl)), ProvideLoggingFactory,
)
